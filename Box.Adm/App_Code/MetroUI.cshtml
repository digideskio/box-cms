@functions {
    private static HtmlString _attr(string attr, object value) {
        return value == null ? new HtmlString("") : new HtmlString(attr + "=\"" + value.ToString() + "\"");
    }

    public static HtmlString TagStyle(string tag) {
        return new HtmlString("tagStyle_" + _adjustTagname(tag));
    }

    private static string _adjustTagname(string tag) {
        string str = tag;
        str = System.Text.RegularExpressions.Regex.Replace(str, "[áàâãª]", "a");
        str = System.Text.RegularExpressions.Regex.Replace(str, "[ÁÀÂÃ]", "A");
        str = System.Text.RegularExpressions.Regex.Replace(str, "[éèêë]", "e");
        str = System.Text.RegularExpressions.Regex.Replace(str, "[ÉÈÊË]", "E");
        str = System.Text.RegularExpressions.Regex.Replace(str, "[íìî]", "i");
        str = System.Text.RegularExpressions.Regex.Replace(str, "[ÍÌÎ]", "I");
        str = System.Text.RegularExpressions.Regex.Replace(str, "[óòôõº]", "o");
        str = System.Text.RegularExpressions.Regex.Replace(str, "[ÓÒÔÕ]", "O");
        str = System.Text.RegularExpressions.Regex.Replace(str, "[úùû]", "u");
        str = System.Text.RegularExpressions.Regex.Replace(str, "[ÚÙÛÜ]", "U");
        str = System.Text.RegularExpressions.Regex.Replace(str, "[ç]", "c");
        str = System.Text.RegularExpressions.Regex.Replace(str, "[Ç]", "C");
        str = System.Text.RegularExpressions.Regex.Replace(str, "[@#&*\\s\\.]", "_");
        return str;
    }
}

@helper Input(string id = null, string type = "text", string value = "", string placeholder = "", string databind = null, int? maxLength = null, string classes = null, string onblur = "", string onkeypress = null, string others = null) {        
    HtmlString othersHTML = new HtmlString(others);
    <input 
        type="@type" 
        value="@value"
        @_attr("id", id)                
        @_attr("data-bind", databind)           
        @_attr("class", classes)                           
        @_attr("maxlength", maxLength)          
        @_attr("onkeypress", onkeypress)     
        @_attr("onblur", onblur)     
        placeholder="@placeholder"
        @othersHTML />                    
}

@helper TextBox(string id = null, string value = "", string placeholder = "", string databind = null, int? maxLength = null, string classes = null, string onblur = "", string onkeypress = null, string others = null, Func<object, HelperResult> decoration = null, int? width = null) {        
    HtmlString style = new HtmlString("");
    if(width!=null) {
        style = new HtmlString("style=\"width: " + width + "px\""); 
    }
<div class="input-control text" @style >
    @Input(id, "text", value, placeholder, databind, maxLength, classes, onblur, onkeypress, others)    
    @if (decoration != null) {
        @decoration(null)       
    } 
</div>
}

@helper SearchBox(string id = null, string value = "", string placeholder = "", string databind = null, int? maxLength = null, string classes = null, string onblur = "", string onkeypress = null, string others = null) {        
<div class="input-control text" >
    @Input(id, "text", value, placeholder, databind, maxLength, classes, onblur, onkeypress, others)    
    <button class='btn-search'></button>    
</div>
}

@helper Password(string id = null, string value = "", string placeholder = "", string databind = null, int? maxLength = null, string classes = null, string onblur = "", string onkeypress = null, string others = null, Func<object, HelperResult> decoration = null) {        
<div class="input-control password">
    @Input(id, "password", value, placeholder, databind, maxLength, classes, onblur, onkeypress, others)    
    @if (decoration != null) {
        @decoration(null)       
    }     
</div>
}

@helper Datepicker(string id = null, string value = "", string placeholder = "", string databind = null, string classes = null, string onblur = "", string onkeypress = null, string others = null, Func<object, HelperResult> decoration = null) {        
    string dateClass = "date " + (classes == null ? "" : classes);    
<div class="input-control text" style="width: 150px">
    @Input(id, "text", value, placeholder, databind, null, dateClass, onblur, onkeypress, others)    
    <button  class="btn-date"  onclick="javascript:$(this).prev().focus(); return false;"></button>
    @if (decoration != null) {
        @decoration(null)       
    }   
</div>
}

@helper TextArea(string id = null, string value = "", string placeholder = "", string databind = null, int? maxLength = null, string classes = null, string onblur = "", string onkeypress = null, string others = null, Func<object, HelperResult> decoration = null, int? width = null) {        
    HtmlString style = new HtmlString("");
    if(width!=null) {
        style = new HtmlString("style=\"width: " + width + "px\""); 
    }
    HtmlString othersHTML = new HtmlString(others);
    <div class="input-control textarea" data-role="input-control" @style>
    <textarea       
        @_attr("id", id)                
        @_attr("data-bind", databind)           
        @_attr("class", classes)                           
        @_attr("maxlength", maxLength)          
        @_attr("onkeypress", onkeypress)     
        @_attr("onblur", onblur)     
        placeholder="@placeholder"
        @othersHTML>@value</textarea>       
    @if (decoration != null) {
        @decoration(null)       
    } 
</div>
}

@helper TimePicker(string field) {
    <div class="input-control select" style="width: 150px">   
        <select data-bind="timeHour: @field" style="width: auto" >
            <option value="0">00</option>
            <option value="1">01</option>
            <option value="2">02</option>
            <option value="3">03</option>
            <option value="4">04</option>
            <option value="5">05</option>
            <option value="6">06</option>
            <option value="7">07</option>
            <option value="8">08</option>
            <option value="9">09</option>
            <option value="10">10</option>
            <option value="11">11</option>
            <option value="12">12</option>
            <option value="13">13</option>
            <option value="14">14</option>
            <option value="15">15</option>
            <option value="16">16</option>
            <option value="17">17</option>
            <option value="18">18</option>
            <option value="19">19</option>
            <option value="20">20</option>
            <option value="21">21</option>
            <option value="22">22</option>
            <option value="23">23</option>            
        </select>
        <span style="width: auto" >:</span>
        <select data-bind="timeMinutes: @field" style="width: auto" >
            <option value="0">00</option>
            <option value="15">15</option>
            <option value="30">30</option>
            <option value="45">45</option>            
        </select>    
    </div>
}

@helper ContentTile(bool browsable, string onClick = "function(){}", string onRemove = null, string onMinus = null, string onPreview = null, string onBrowse = null, string size = "quadro", bool showTags = true, bool showCross = true, bool showSocial = true) {
    <li onmouseover="showContextMenu(this)" onmouseout="hideContextMenu(this)">
        <div class="tile @size bg-cyan parts" data-bind="click: @(onClick)">
            <ul>
                <li>
                    <div class="tile-content image">
                        <img data-bind="attr: { src: FileUrl.toView(ThumbFilePath, true) }" style="height: 100%; max-width: none"
                             onerror="this.src='@Href("~/Content/Core_Images/no-image.png")'" />
                    </div>
                </li>
                <li>
                    <div class="tile-content tile-status">
                        <span data-bind="text: Name" class="name"></span>
                        <span data-bind="text: ExternalLinkUrl, visible: ExternalLinkUrl!=''" class="text"></span>
                        <span class="text" data-bind="text: '@Box.CMS.SharedStrings.created_at ' + CreateDate.toLocaleString()"></span>
                        @if(showCross) {
                        <ul data-bind="foreach: CrossLinks" class="tileCrossLinkList">
                            <li>
                                <span data-bind="text: '(' + PageArea +')', visible: PageArea!=''" class="text"></span>
                            </li>
                        </ul>
                        }
                        @if(showTags) {
                        <ul data-bind="foreach: Tags" class="tileTagList">
                            <li data-bind="css: tagCss">
                                <span data-bind="text: Tag, visible: Tag!=''" class="text"></span>
                            </li>
                        </ul>
                        }

                    </div>
                </li>

            </ul>
            <div class="brand">
                @if (showSocial && browsable) {
                    <span class="badge badge-pageCount" data-bind="text: PageViewCount==null?0:PageViewCount.Count"></span>                
                    <span class="badge2 badge-commentCount" data-bind="text: CommentsCount==null?0:CommentsCount.Count, visible: CommentsCount>0"></span>
                    <span class="badge3 badge-shareCount" data-bind="text: ShareCount==null?0:ShareCount.Count, visible: ShareCount>0"></span>
                }                
                <div class="badge0 bg-red" data-bind="visible: pageVM.isContentNotPublished($data)" title="@Box.CMS.SharedStrings.CONTENT_NOT_PUBLISHED">
                    <i class="icon-blocked"></i>
                </div>
                <div class="badge0 bg-orange" data-bind="visible: pageVM.isContentScheduled($data)" title="@Box.CMS.SharedStrings.CONTENT_SCHEDULED">
                    <i class="icon-calendar"></i>
                </div>
                <div class="badge0 bg-red" data-bind="visible: pageVM.isContentExpired($data)" title="@Box.CMS.SharedStrings.CONTENT_EXPIRED">
                    <i class="icon-calendar"></i>
                </div>                
            </div>
        </div>
        <nav class="contextMenu">
            @if (!String.IsNullOrEmpty(onBrowse)) {
                <button data-bind="click: @onBrowse, clickBubble: false" onmouseout="pageVM.stopPreview();">
                    <i class="icon-new-tab"></i>
                </button>                
            }
            @if (!String.IsNullOrEmpty(onPreview)) {                
                <button data-bind="click: @onPreview, clickBubble: false" onmouseout="pageVM.stopPreview();">
                    <i class="icon-eye"></i>
                </button>
            }
            @if (!String.IsNullOrEmpty(onRemove)) {
                <button data-bind="click: @onRemove, clickBubble: false">
                    <i class="icon-remove"></i>
                </button>
            }
            @if (!String.IsNullOrEmpty(onMinus)) {
                <button data-bind="click: @onMinus, clickBubble: false">
                    <i class="icon-minus-2"></i>
                </button>
            }
            

        </nav>
    </li>
}